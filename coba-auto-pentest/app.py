import openai
import os
from zapv2 import ZAPv2
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet

# Set your OpenAI API key here
openai.api_key = 'YOUR_OPENAI_API_KEY'

# Set up OWASP ZAP API
zap = ZAPv2(apikey='YOUR_ZAP_API_KEY', proxies={'http': 'http://localhost:8080', 'https': 'http://localhost:8080'})

# Function to scan the URL
def scan_url(url):
    print(f"Starting scan on {url}")
    scan_id = zap.ascan.scan(url)
    
    while int(zap.ascan.status(scan_id)) < 100:
        print(f"Scan progress: {zap.ascan.status(scan_id)}%")
    
    print(f"Scan completed on {url}")
    return zap.core.alerts(baseurl=url)

# Function to generate explanations using OpenAI API
def generate_explanation(issue_title, issue_description):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=f"The security issue is '{issue_title}'. The description is: '{issue_description}'. Explain the potential danger, suggest solutions, and recommend actions to fix this issue.",
        max_tokens=150,
    )
    return response.choices[0].text.strip()

# Function to generate PDF report
def generate_pdf_report(url, issues):
    report_name = f"Security_Report_{url.replace('https://', '').replace('http://', '').replace('/', '_')}.pdf"
    c = canvas.Canvas(report_name, pagesize=letter)
    width, height = letter
    styles = getSampleStyleSheet()
    
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, height - 50, f"Security Analysis Report for {url}")
    
    text_object = c.beginText(40, height - 80)
    text_object.setFont("Helvetica", 12)
    
    for issue in issues:
        text_object.textLines(f"Security Issue: {issue['name']}")
        text_object.textLines(f"Risk: {issue['risk']}")
        text_object.textLines(f"Description: {issue['description']}")
        
        # Use OpenAI API to generate explanation
        explanation = generate_explanation(issue['name'], issue['description'])
        text_object.textLines(f"Explanation: {explanation}")
        
        text_object.textLines("====================================================\n")
    
    c.drawText(text_object)
    c.showPage()
    c.save()
    print(f"Report saved as {report_name}")

# Main function
def main(url):
    issues = scan_url(url)
    formatted_issues = []

    for issue in issues:
        formatted_issues.append({
            "name": issue.get('alert', 'Unknown Issue'),
            "risk": issue.get('risk', 'No Risk Information'),
            "description": issue.get('description', 'No Description Provided')
        })
    
    generate_pdf_report(url, formatted_issues)

if __name__ == "__main__":
    url_to_scan = input("Enter the URL to scan: ")
    main(url_to_scan)
